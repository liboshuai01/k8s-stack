# fleet-server
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: my-fleet-server
  namespace: elastic-system
spec:
  version: 8.16.1
  kibanaRef:
    name: my-kibana
    namespace: elastic-system
  elasticsearchRefs:
    name: my-es-cluster
    namespace: elastic-system
  mode: fleet
  fleetServerEnabled: true
  policyID: eck-fleet-server
  deployment:
    replicas: 1
    podTemplate:
      spec:
        serviceAccountName: elastic-agent
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0

# elastic-agent
---
apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: my-elastic-agent
  namespace: elastic-system
spec:
  version: 8.16.1
  kibanaRef:
    name: my-kibana
    namespace: elastic-system
  fleetServerRef:
    name: my-fleet-server
    namespace: elastic-system
  mode: fleet
  policyID: eck-agent
  daemonSet:
    podTemplate:
      spec:
        serviceAccountName: elastic-agent
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
        volumes:
          - name: agent-data
            emptyDir: {}

# Kibana            
---
apiVersion: kibana.k8s.elastic.co/v1
kind: Kibana
metadata:
  namespace: elastic-system
  name: my-kibana
spec:
  version: 8.16.1
  count: 1
  elasticsearchRef:
    name: my-es-cluster
    namespace: elastic-system
  config:
    xpack.fleet.agents.elasticsearch.hosts: ["<ELASTICSEARCH_HOST_URL>-es-http.default.svc:9200"]
    xpack.fleet.agents.fleet_server.hosts: ["<FLEET_SERVER_HOST_URL>-sample-agent-http.default.svc:8220"]
    xpack.fleet.packages:
      - name: system
        version: latest
      - name: elastic_agent
        version: latest
      - name: fleet_server
        version: latest
    xpack.fleet.agentPolicies:
      - name: Fleet Server on ECK policy
        id: eck-fleet-server
        namespace: elastic-system
        is_managed: true
        monitoring_enabled:
          - logs
          - metrics
        unenroll_timeout: 900
        package_policies:
          - name: fleet_server-1
            id: fleet_server-1
            package:
              name: fleet_server
      - name: Elastic Agent on ECK policy
        id: eck-agent
        namespace: elastic-system
        is_managed: true
        monitoring_enabled:
          - logs
          - metrics
        unenroll_timeout: 900
        is_default: true
        package_policies:
          - name: system-1
            id: system-1
            package:
              name: system
  podTemplate:
    spec:
      containers:
        - name: kibana
          env:
            - name: NODE_OPTIONS
              value: "--max-old-space-size=2048"
          resources:
            requests:
              memory: 1Gi
              cpu: 0.5
            limits:
              memory: 2.5Gi
              cpu: 2
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-kibana-ingress
  namespace: elastic-system
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/proxy-ssl-verify: "off"
spec:
  ingressClassName: nginx
  rules:
    - host: kibana.lbs.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-kibana-kb-http
                port:
                  number: 5601

# ElasticSearch
---
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  namespace: elastic-system
  name: my-es-cluster
spec:
  version: 8.16.1
  volumeClaimDeletePolicy: DeleteOnScaledownOnly
  nodeSets:
    - name: master-nodes
      count: 1
      config:
        node.roles: ["master"]
      volumeClaimTemplates:
        - metadata:
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
            storageClassName: nfs
    - name: data-nodes
      count: 2
      config:
        node.roles: ["data"]
      volumeClaimTemplates:
        - metadata:
            name: elasticsearch-data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 20Gi
            storageClassName: nfs

# 其他
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elastic-agent
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources:
      - pods
      - nodes
      - namespaces
    verbs:
      - get
      - watch
      - list
  - apiGroups: ["coordination.k8s.io"]
    resources:
      - leases
    verbs:
      - get
      - create
      - update
  - apiGroups: ["apps"]
    resources:
      - replicasets
    verbs:
      - list
      - watch
  - apiGroups: ["batch"]
    resources:
      - jobs
    verbs:
      - list
      - watch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-agent
  namespace: elastic-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: elastic-agent
subjects:
  - kind: ServiceAccount
    name: elastic-agent
    namespace: elastic-system
roleRef:
  kind: ClusterRole
  name: elastic-agent
  apiGroup: rbac.authorization.k8s.io